#include <string>
#include <vector>
#include <stack>
#include <iostream>

using namespace std;
/*
1. 입력이 빈 문자열인 경우, 빈 문자열을 반환합니다.
2. 문자열 w를 두 "균형잡힌 괄호 문자열" u, v로 분리합니다. 
단, u는 "균형잡힌 괄호 문자열"로 더 이상 분리할 수 없어야 하며, v는 빈 문자열이 될 수 있습니다.
3. 문자열 u가 "올바른 괄호 문자열" 이라면 문자열 v에 대해 1단계부터 다시 수행합니다.
  3-1. 수행한 결과 문자열을 u에 이어 붙인 후 반환합니다.
4. 문자열 u가 "올바른 괄호 문자열"이 아니라면 아래 과정을 수행합니다.
  4-1. 빈 문자열에 첫 번째 문자로 '('를 붙입니다.
  4-2. 문자열 v에 대해 1단계부터 재귀적으로 수행한 결과 문자열을 이어 붙입니다.
  4-3. ')'를 다시 붙입니다.
  4-4. u의 첫 번째와 마지막 문자를 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙입니다.
  4-5. 생성된 문자열을 반환합니다.
*/
bool RIGHT_STRING(string p) {
	stack<char> arr;
	try {
		for (int i = 0; i < p.length(); i++) 
		{
			p[i] == '(' ? arr.push(p[i]) : (arr.empty() ? throw 1 : arr.pop());
		}
	}
	catch (int a) {
		return false;
	}
	return true;
}

bool balance(string p) {
	int c1 = 0;
	for (int i = 0; i < p.length(); i++)
		p[i] == '(' ? c1++ : c1--;
	return c1 == 0;
}
string solution(string p) {
	if (p.empty()) return "";
	string u = "", v = "";
	int i = 2;
	for (u = p.substr(0, 2); !balance(u); u = p.substr(0, i += 2));
	v = p.substr(i, p.length() - i);

	if (RIGHT_STRING(u)) return u + solution(v);
	
	string answer = "";
	for (i = 1; i < u.length() - 1; i++)
		u[i] == ')' ? answer += '(' : answer += ')';

	answer = '(' + solution(v) + ')' + answer;

	return answer;
}

int main()
{
	string s = "(()())()";
	string s1 = ")(";
	string s2 = "()))((()";
	cout << solution(s) << endl;
	cout << solution(s1) << endl;
	cout << solution(s2) << endl;
}